/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateImagesArgs } from "./CreateImagesArgs";
import { UpdateImagesArgs } from "./UpdateImagesArgs";
import { DeleteImagesArgs } from "./DeleteImagesArgs";
import { ImagesCountArgs } from "./ImagesCountArgs";
import { ImagesFindManyArgs } from "./ImagesFindManyArgs";
import { ImagesFindUniqueArgs } from "./ImagesFindUniqueArgs";
import { Images } from "./Images";
import { ImagesService } from "../images.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Images)
export class ImagesResolverBase {
  constructor(
    protected readonly service: ImagesService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Images",
    action: "read",
    possession: "any",
  })
  async _imagesItemsMeta(
    @graphql.Args() args: ImagesCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Images])
  @nestAccessControl.UseRoles({
    resource: "Images",
    action: "read",
    possession: "any",
  })
  async imagesItems(
    @graphql.Args() args: ImagesFindManyArgs
  ): Promise<Images[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Images, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Images",
    action: "read",
    possession: "own",
  })
  async images(
    @graphql.Args() args: ImagesFindUniqueArgs
  ): Promise<Images | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Images)
  @nestAccessControl.UseRoles({
    resource: "Images",
    action: "create",
    possession: "any",
  })
  async createImages(@graphql.Args() args: CreateImagesArgs): Promise<Images> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Images)
  @nestAccessControl.UseRoles({
    resource: "Images",
    action: "update",
    possession: "any",
  })
  async updateImages(
    @graphql.Args() args: UpdateImagesArgs
  ): Promise<Images | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Images)
  @nestAccessControl.UseRoles({
    resource: "Images",
    action: "delete",
    possession: "any",
  })
  async deleteImages(
    @graphql.Args() args: DeleteImagesArgs
  ): Promise<Images | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
